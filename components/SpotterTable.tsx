'use client';import { useEffect, useMemo, useState } from 'react';import { clsx } from 'clsx';type InitialState={airport:string;direction:'arrivals'|'departures';minScore:number};type MovementRow={id:string;airport:string;direction:'arrivals'|'departures';extractedAtUtc:string;airline?:string|null;owner?:string|null;registration:string;modelCode?:string|null;modelText?:string|null;originCode?:string|null;destinationCode?:string|null;liveryInfo?:string|null;scheduledDepartureUtc?:string|null;scheduledArrivalUtc?:string|null;actualDepartureUtc?:string|null;actualArrivalUtc?:string|null;score?:{score:number;label:'exceptional'|'notable'|'normal';reasons:string[]} | null;};function fmt(dt?:string|null){if(!dt) return '—';try{return new Date(dt).toISOString().replace('T',' ').slice(0,16)}catch{return '—'}}export default function SpotterTable({initial}:{initial:InitialState}){const [rows,setRows]=useState<MovementRow[]>([]);const [loading,setLoading]=useState(true);const [error,setError]=useState<string|null>(null);const [airport,setAirport]=useState<string>(initial.airport);const [direction,setDirection]=useState<'arrivals'|'departures'>(initial.direction);const [minScore,setMinScore]=useState<number>(initial.minScore);const [maxScore,setMaxScore]=useState<number|''>('');const [from,setFrom]=useState<string>('');const [to,setTo]=useState<string>('');const [timeField,setTimeField]=useState<'extracted'|'scheduled'|'actual'>('extracted');const [airline,setAirline]=useState<string>('');const [modelCode,setModelCode]=useState<string>('');const [registration,setRegistration]=useState<string>('');const [origin,setOrigin]=useState<string>('');const [destination,setDestination]=useState<string>('');const [label,setLabel]=useState<'all'|'exceptional'|'notable'|'normal'>('all');const [hasLivery,setHasLivery]=useState<'any'|'yes'|'no'>('any');const [liveryContains,setLiveryContains]=useState<string>('');const [reasonsContains,setReasonsContains]=useState<string>('');const params=useMemo(()=>{const p=new URLSearchParams({airport,direction,minScore:String(minScore),timeField});if(maxScore!==''&&typeof maxScore==='number') p.set('maxScore',String(maxScore));if(from) p.set('from',from);if(to) p.set('to',to);if(airline) p.set('airline',airline);if(modelCode) p.set('modelCode',modelCode.toUpperCase());if(registration) p.set('registration',registration.toUpperCase());if(origin) p.set('origin',origin.toUpperCase());if(destination) p.set('destination',destination.toUpperCase());if(label!=='all') p.set('label',label);if(hasLivery!=='any') p.set('hasLivery',hasLivery==='yes'?'true':'false');if(liveryContains) p.set('liveryContains',liveryContains);if(reasonsContains) p.set('reasonsContains',reasonsContains);return p},[airport,direction,minScore,maxScore,from,to,timeField,airline,modelCode,registration,origin,destination,label,hasLivery,liveryContains,reasonsContains]);useEffect(()=>{setLoading(true);fetch(`/api/spotter?${params}`).then(r=>r.json()).then(d=>{setRows(d.items);setLoading(false)}).catch(e=>{setError(String(e));setLoading(false)})},[params.toString()]);const setQuick=(h:number)=>{const now=new Date();const fromDate=new Date(now.getTime()-h*3600*1000);setFrom(now.toISOString().slice(0,16));setTo(fromDate.toISOString().slice(0,16))};const resetFilters=()=>{setAirline('');setModelCode('');setRegistration('');setOrigin('');setDestination('');setLabel('all');setHasLivery('any');setLiveryContains('');setReasonsContains('');setFrom('');setTo('');setMaxScore('');setTimeField('extracted')};return(<div className='space-y-4'><div className='flex flex-wrap gap-3 items-end'><div><label className='block text-xs mb-1'>Airport (IATA)</label><input className='input w-28' value={airport} onChange={e=>setAirport(e.target.value.toUpperCase())} /></div><div><label className='block text-xs mb-1'>Direction</label><select className='input' value={direction} onChange={e=>setDirection(e.target.value as any)}><option value='arrivals'>arrivals</option><option value='departures'>departures</option></select></div><div><label className='block text-xs mb-1'>Time field</label><select className='input' value={timeField} onChange={e=>setTimeField(e.target.value as any)}><option value='extracted'>extract</option><option value='scheduled'>scheduled</option><option value='actual'>actual</option></select></div><div><label className='block text-xs mb-1'>Min score</label><input type='number' className='input w-24' value={minScore} onChange={e=>setMinScore(parseInt(e.target.value||'0',10))} /></div><div><label className='block text-xs mb-1'>Max score</label><input type='number' className='input w-24' value={maxScore} onChange={e=>setMaxScore(e.target.value===''?'':parseInt(e.target.value||'0',10))} /></div><div className='flex gap-2 items-end'><button className='btn' onClick={()=>setQuick(6)}>Last 6h</button><button className='btn' onClick={()=>setQuick(12)}>Last 12h</button><button className='btn' onClick={()=>setQuick(24)}>Last 24h</button></div></div><div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3'><div><label className='block text-xs mb-1'>From (UTC)</label><input type='datetime-local' className='input' value={from} onChange={e=>setFrom(e.target.value)} /></div><div><label className='block text-xs mb-1'>To (UTC)</label><input type='datetime-local' className='input' value={to} onChange={e=>setTo(e.target.value)} /></div><div><label className='block text-xs mb-1'>Airline contains</label><input className='input' value={airline} onChange={e=>setAirline(e.target.value)} /></div><div><label className='block text-xs mb-1'>Model code</label><input className='input' placeholder='A20N, B772…' value={modelCode} onChange={e=>setModelCode(e.target.value)} /></div><div><label className='block text-xs mb-1'>Registration contains</label><input className='input' value={registration} onChange={e=>setRegistration(e.target.value)} /></div><div><label className='block text-xs mb-1'>Origin</label><input className='input' value={origin} onChange={e=>setOrigin(e.target.value)} /></div><div><label className='block text-xs mb-1'>Destination</label><input className='input' value={destination} onChange={e=>setDestination(e.target.value)} /></div><div><label className='block text-xs mb-1'>Label</label><select className='input' value={label} onChange={e=>setLabel(e.target.value as any)}><option value='all'>all</option><option value='exceptional'>exceptional</option><option value='notable'>notable</option><option value='normal'>normal</option></select></div><div><label className='block text-xs mb-1'>Has livery info</label><select className='input' value={hasLivery} onChange={e=>setHasLivery(e.target.value as any)}><option value='any'>any</option><option value='yes'>yes</option><option value='no'>no</option></select></div><div><label className='block text-xs mb-1'>Livery contains</label><input className='input' value={liveryContains} onChange={e=>setLiveryContains(e.target.value)} /></div><div className='md:col-span-2'><label className='block text-xs mb-1'>Reason contains</label><input className='input' placeholder='e.g., First visit' value={reasonsContains} onChange={e=>setReasonsContains(e.target.value)} /></div></div><div className='flex gap-2'><button className='btn' onClick={resetFilters}>Reset filters</button></div>{loading&&<div>Loading…</div>}{error&&<div className='text-red-600'>{error}</div>}{!loading&&!error&&(<><div className='text-sm text-zinc-500'>Showing {rows.length} rows</div><table className='table'><thead><tr><th>Extract (UTC)</th><th>Sched (UTC)</th><th>Actual (UTC)</th><th>Airport</th><th>Dir</th><th>Reg</th><th>Type</th><th>Airline</th><th>Route</th><th>Score</th><th>Reasons</th></tr></thead><tbody>{rows.map(r=>(<tr key={r.id}><td className='font-mono'>{fmt(r.extractedAtUtc)}</td><td className='font-mono'>{direction==='departures'?fmt(r.scheduledDepartureUtc):fmt(r.scheduledArrivalUtc)}</td><td className='font-mono'>{direction==='departures'?fmt(r.actualDepartureUtc):fmt(r.actualArrivalUtc)}</td><td>{r.airport}</td><td>{r.direction}</td><td className='font-mono'>{r.registration}</td><td>{r.modelCode} <span className='text-zinc-500'>{r.modelText}</span></td><td>{r.airline||r.owner}</td><td>{r.originCode||'—'} → {r.destinationCode||'—'}</td><td><span className={clsx('badge',{'badge-exceptional':r.score?.label==='exceptional','badge-notable':r.score?.label==='notable',})}>{r.score?.label??'normal'} {typeof r.score?.score==='number'?`(${r.score?.score})`:''}</span></td><td className='max-w-[420px]'><div className='flex flex-wrap gap-1'>{(r.score?.reasons||[]).map((reason,i)=>(<span key={i} className='badge badge-reason'>{reason}</span>))}</div></td></tr>))}</tbody></table></>)}</div>) }
