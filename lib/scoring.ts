import { prisma } from './db';import type { RuleContent } from './rules';import { DateTime } from 'luxon';type MovementLike={id:string;airport:string;direction:string;extractedAtUtc:Date;airline?:string|null;owner?:string|null;registration:string;modelCode?:string|null;modelText?:string|null;originCode?:string|null;destinationCode?:string|null;liveryInfo?:string|null;};export async function computeScore(m:MovementLike,rules:RuleContent){const reasons:string[]=[];const ruleHits:string[]=[];let score=0;const add=(p:number,id:string,reason:string)=>{if(p<=0) return;score+=p;ruleHits.push(id);reasons.push(reason)};if(m.liveryInfo){const l=m.liveryInfo.toLowerCase();for(const kw of rules.special_livery_keywords){if(l.includes(kw.toLowerCase())){add(rules.weights.specialLivery,'specialLivery.keyword',`Special livery: contains “${kw}”`);break}}}if(m.registration&&rules.special_registrations[m.registration]){add(rules.weights.specialLivery,'specialLivery.registration',`Special registration: ${m.registration}`)}if(m.modelCode&&rules.rare_models_global.includes(m.modelCode.toUpperCase())){add(rules.weights.rareModelGlobal,'rareModel.global',`Rare model globally: ${m.modelCode}`)}const rarModelsAt=rules.rare_models_by_airport[m.airport]||[];if(m.modelCode&&rarModelsAt.includes(m.modelCode.toUpperCase())){add(rules.weights.rareAtAirport,'rareModel.airport',`Rare model at ${m.airport}: ${m.modelCode}`)}const rarAirlinesAt=rules.rare_airlines_by_airport[m.airport]||[];const airlineCode=(m.airline||'').toUpperCase().slice(0,3);if(airlineCode&&rarAirlinesAt.includes(airlineCode)){add(rules.weights.rareAtAirport,'rareAirline.airport',`Rare airline at ${m.airport}: ${airlineCode}`)}if(m.registration){const windowStart=DateTime.fromJSDate(m.extractedAtUtc).minus({days:rules.lookbackDays}).toJSDate();const seen=await prisma.movement.count({where:{airport:m.airport,registration:m.registration,extractedAtUtc:{gte:windowStart,lt:m.extractedAtUtc}}});if(seen===0){add(rules.weights.firstTimeHere,'firstTimeHere',`First visit in ${rules.lookbackDays}d: ${m.registration}`)}}if(m.originCode&&m.destinationCode){const windowStart=DateTime.fromJSDate(m.extractedAtUtc).minus({days:rules.lookbackDays}).toJSDate();const cnt=await prisma.movement.count({where:{airport:m.airport,direction:m.direction,originCode:m.originCode,destinationCode:m.destinationCode,extractedAtUtc:{gte:windowStart,lt:m.extractedAtUtc}}});if(cnt<=rules.thresholds.unusualRouteMaxCount){add(rules.weights.unusualRoute,'unusualRoute',`Unusual route at ${m.airport}: ${m.originCode}→${m.destinationCode} (count ${cnt})`)}}const label=score>=rules.thresholds.exceptional?'exceptional':score>=rules.thresholds.notable?'notable':'normal';return{score,label,reasons,ruleHits}}export async function scoreAndUpsert(movementId:string,rules:RuleContent){const m=await prisma.movement.findUnique({where:{id:movementId}});if(!m) return;const {score,label,reasons,ruleHits}=await computeScore(m as any,rules);await prisma.spotterScore.upsert({where:{movementId},update:{score,label,reasons:JSON.stringify(reasons),ruleHits:JSON.stringify(ruleHits),computedAt:new Date()},create:{movementId,score,label,reasons:JSON.stringify(reasons),ruleHits:JSON.stringify(ruleHits)}})}
