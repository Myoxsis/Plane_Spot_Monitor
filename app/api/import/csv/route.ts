import { NextRequest, NextResponse } from 'next/server';import { parseCsv } from '@/lib/csv';import { prisma } from '@/lib/db';import { cleanStr, roundToMinute, parseWithTz } from '@/lib/normalize';import { getActiveRules } from '@/lib/rules';import { computeScore } from '@/lib/scoring';export const dynamic='force-dynamic';export const maxDuration=60;export async function POST(req:NextRequest){const form=await req.formData();const file=form.get('file');if(!(file instanceof File)) return new NextResponse('Missing file',{status:400});const buf=Buffer.from(await file.arrayBuffer());let rows;try{rows=parseCsv(buf)}catch(e:any){return new NextResponse('CSV parse error: '+e.message,{status:400})}const rules=await getActiveRules();let processed=0,inserted=0,updated=0,flagged=0;const sampleFlagged:any[]=[];const diagnostics:Record<string,number>={};const bump=(k:string)=>diagnostics[k]=(diagnostics[k]||0)+1;for(const row of rows){processed++;try{const airport=cleanStr(row.airport)?.toUpperCase();const direction=cleanStr(row.flight_direction)?.toLowerCase() as 'arrivals'|'departures'|null;const registration=cleanStr(row.registration)?.toUpperCase();if(!airport){bump('missing_airport');continue}if(direction!=='arrivals'&&direction!=='departures'){bump('bad_direction');continue}if(!registration){bump('missing_registration');continue}let airportRec=await prisma.airport.findUnique({where:{iata:airport}});if(!airportRec){airportRec=await prisma.airport.create({data:{iata:airport,timezone:'UTC',name:airport}});bump('created_stub_airport')}const extractLocal=cleanStr(row.extract_time);if(!extractLocal){bump('missing_extract_time');continue}const extractedAtUtc=parseWithTz(extractLocal,airportRec.timezone);const rounded=roundToMinute(extractedAtUtc);const modelCode=cleanStr(row.model_code)?.toUpperCase()||null;const modelText=cleanStr(row.model_text);const owner=cleanStr(row.owner);const airline=cleanStr(row.airline);const originCode=cleanStr(row.origin_code)?.toUpperCase()||null;const originName=cleanStr(row.origin_name);const destinationCode=cleanStr(row.destination_code)?.toUpperCase()||null;const destinationName=cleanStr(row.destination_name);const liveryInfo=cleanStr((row as any)['Livery Info']);const schedDepLocal=cleanStr((row as any).scheduled_departure);const schedArrLocal=cleanStr((row as any).scheduled_arrival);const realDepLocal=cleanStr((row as any).real_departure);const realArrLocal=cleanStr((row as any).real_arrival);const scheduledDepartureUtc=schedDepLocal?parseWithTz(schedDepLocal,airportRec.timezone):null;const scheduledArrivalUtc=schedArrLocal?parseWithTz(schedArrLocal,airportRec.timezone):null;const actualDepartureUtc=realDepLocal?parseWithTz(realDepLocal,airportRec.timezone):null;const actualArrivalUtc=realArrLocal?parseWithTz(realArrLocal,airportRec.timezone):null;const dedupeKey=[airport,direction,registration,originCode||'-',destinationCode||'-',rounded.toISOString()].join('|');const existing=await prisma.movement.findUnique({where:{dedupeKey}});if(existing){await prisma.movement.update({where:{id:existing.id},data:{extractedAtUtc,airline,owner,modelCode,modelText,originCode,originName,destinationCode,destinationName,liveryInfo,scheduledDepartureUtc,scheduledArrivalUtc,actualDepartureUtc,actualArrivalUtc}});updated++;const m=await prisma.movement.findUnique({where:{id:existing.id}});if(m){const res=await computeScore(m as any,rules);await prisma.spotterScore.upsert({where:{movementId:m.id},update:{score:res.score,label:res.label,reasons:JSON.stringify(res.reasons),ruleHits:JSON.stringify(res.ruleHits),computedAt:new Date()},create:{movementId:m.id,score:res.score,label:res.label,reasons:JSON.stringify(res.reasons),ruleHits:JSON.stringify(res.ruleHits)}});if(res.score>=20){flagged++;if(sampleFlagged.length<5) sampleFlagged.push({id:m.id,registration:m.registration,modelCode:m.modelCode,modelText:m.modelText,score:res})}}}else{const created=await prisma.movement.create({data:{airport,direction,registration,extractedAtUtc,dedupeKey,airline,owner,modelCode,modelText,originCode,originName,destinationCode,destinationName,liveryInfo,scheduledDepartureUtc,scheduledArrivalUtc,actualDepartureUtc,actualArrivalUtc}});inserted++;const res=await computeScore(created as any,rules);await prisma.spotterScore.create({data:{movementId:created.id,score:res.score,label:res.label,reasons:JSON.stringify(res.reasons),ruleHits:JSON.stringify(res.ruleHits)}});if(res.score>=20){flagged++;if(sampleFlagged.length<5) sampleFlagged.push({id:created.id,registration:created.registration,modelCode:created.modelCode,modelText:created.modelText,score:res})}}}catch(e){bump('row_errors');continue}}return NextResponse.json({processed,inserted,updated,flagged,diagnostics,samples:sampleFlagged})}
